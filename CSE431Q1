import random
import timeit
import matplotlib.pyplot as plt


def insertion_sort(arr):
    for i in range(1, len(arr)):
        key = arr[i]
        j = i - 1
        while j >= 0 and arr[j] > key:
            arr[j + 1] = arr[j]
            j -= 1
        arr[j + 1] = key


def merge_sort(arr):
    if len(arr) > 1:
        mid = len(arr) // 2
        L = arr[:mid]
        R = arr[mid:]

        merge_sort(L)
        merge_sort(R)

        i = j = k = 0

        while i < len(L) and j < len(R):
            if L[i] < R[j]:
                arr[k] = L[i]
                i += 1
            else:
                arr[k] = R[j]
                j += 1
            k += 1

        while i < len(L):
            arr[k] = L[i]
            i += 1
            k += 1

        while j < len(R):
            arr[k] = R[j]
            j += 1
            k += 1


def time_sorting_algorithms(n_values, repetitions=10):
    insertion_times = []
    merge_times = []

    for n in n_values:

        data = [random.randint(0, 1000) for _ in range(n)]
        

        insertion_time = timeit.timeit(lambda: insertion_sort(data.copy()), number=repetitions)
        insertion_times.append(insertion_time / repetitions)  

 
        merge_time = timeit.timeit(lambda: merge_sort(data.copy()), number=repetitions)
        merge_times.append(merge_time / repetitions)  

    return insertion_times, merge_times


n_values = list(range(10, 1000, 50))  
repetitions = 50  


insertion_times, merge_times = time_sorting_algorithms(n_values, repetitions)


plt.figure(figsize=(12, 6))
plt.plot(n_values, insertion_times, label="Insertion Sort", marker='o')
plt.plot(n_values, merge_times, label="Merge Sort", marker='x')
plt.xlabel("Input Size (n)")
plt.ylabel("Average Time (seconds)")
plt.title("Performance Comparison of Insertion Sort and Merge Sort")
plt.legend()
plt.grid(True)
plt.show()
